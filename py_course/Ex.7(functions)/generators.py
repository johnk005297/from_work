#


'''
    Подвиг 1. Вводится натуральное число N. Необходимо определить функцию-генератор с именем get_sum, которая бы возвращала текущую сумму чисел последовательности длины N в диапазоне целых чисел [1; N]. 
    Например:
        - для первого числа 1 сумма равна 1;
        - для второго числа 2 сумма равна 1+2 = 3
        ....
        - для N-го числа сумма равна 1+2+...+(N-1)+N

    Реализовать функцию-генератор get_sum без использования коллекций. Вызывать ее не нужно, только определить.
'''

def get_sum():
    N = int(input())
    res = 0
    for x in range(1,N+1):
        res+=x
        yield res


'''
    Подвиг 2. Мы с вами в заданиях несколько раз генерировали последовательность чисел Фибоначчи, которая строится по правилу: каждое последующее число равно сумме двух предыдущих. 
    Для разнообразия давайте будем генерировать каждое последующее как сумму трех предыдущих чисел. При этом первые три числа равны 1 и имеем такую последовательность:
    1, 1, 1, 3, 5, 9, 17, 31, 57, ...
    Не знаю, есть ли у нее название, поэтому, в рамках уроков, я скромно назову ее последовательностью Трибоначчи.
    Итак, на вход программы поступает натуральное число N (N > 5) и необходимо определить функцию-генератор, которая бы возвращала N первых чисел последовательности Трибоначчи (включая первые три единицы).
    Реализуйте эту функцию без использования коллекций (списков, кортежей, словарей и т.п.). Вызовите ее N раз для получения N чисел и выведите полученные числа на экран в одну строчку через пробел.
'''

# Option 1
def get_tribonacci():
    N = int(input())
    a,b,c = 1,1,1
    for x in range(1, N+1):
        if x < 4:
            res = 1
        else:
            res = a+b+c
            a,b,c = b,c,res
        yield res

# a = get_tribonacci()
# for x in a:
#     print(x, end=' ')


# Option 2

    # Изначально a b c = 1 1 1 - возвращается a = 1
    # Пересчитывается a b c = 1 1 3 -> a = 1
    # a b c = 1 3 5 -> a = 1
    # a b c = 3 5 9 -> a = 3
    # ...
    # Седьмое повторение цикла a b c = 17 31 57 -> a = 17
    # Перессчитывается a b c = 31 57 105 но дальше цикл не повторяется, поэтому yield не срабатывает и ничего не возвращает.

def get_tribonacci_2():
    N = int(input())
    a = b = c = 1
    for _ in range(N):
        yield a
        a, b, c = b, c, a + b + c
        
# print(*get_tribonacci_2())



'''
    Подвиг 3. Вводится натуральное число N (N > 8). Необходимо определить функцию-генератор, которая бы выдавала пароль длиной N символов из случайных букв, цифр и некоторых других знаков.
    Для получения последовательности допустимых символов для генерации паролей в программе импортированы две строки: ascii_lowercase, ascii_uppercase (см. листинг ниже), 
    на основе которых формируется общий список:
        from string import ascii_lowercase, ascii_uppercase
        chars = ascii_lowercase + ascii_uppercase + "0123456789!?@#$*"
    Функция-генератор должна при каждом вызове возвращать новый пароль из случайно выбранных символов chars длиной N и делать это бесконечно, то есть, вызывать ее можно бесконечное число раз. 
    Сгенерировать случайный индекс indx в диапазоне [a; b] для символа можно с помощью функции randint модуля random:
        import random
        random.seed(1)
        indx = random.randint(a, b)
    Сгенерируйте с помощью этой функции первые пять паролей и выведите их в столбик (каждый с новой строки).
'''

# Option 1
import random
from string import ascii_lowercase, ascii_uppercase

# установка зерна датчика случайных чисел
random.seed(1)
def random_gen():
    N = int(input())
    chars = ascii_lowercase + ascii_uppercase + "0123456789!?@#$*"
    while True:
        psw = ''
        for x in range(N):
            indx = random.randint(0, len(chars)-1)
            psw+=chars[indx]
        yield psw

a = random_gen()
# print(next(a))
# print(next(a))
# print(next(a))
# print(next(a))
# print(next(a))
# # or
# for x in range(5):
#     print(next(a))



'''
    Подвиг 5. Определите функцию-генератор, которая бы возвращала простые числа.
    Выведите с помощью этой функции первые 20 простых чисел (начиная с 2) в одну строчку через пробел.
'''

def get_prime():

    number = 1
    while True:
        number += 1
        for x in range(2, number // 2 + 1):
            if number % x == 0:
                break
        else:
            yield number

pn = get_prime()
# for x in range(20):
#     print(next(pn),end=' ')
